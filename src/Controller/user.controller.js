import User from "../Model/user.model.js";
import bcrypt from "bcrypt";
import cloudinary from "../Config/Cloudinary.js";

// buffer -> data URI string
const toDataURI = (file) =>
  `data:${file.mimetype};base64,${file.buffer.toString("base64")}`;

export const createUser = async (req, res) => {
  try {
    const {
      fullName,
      email,
      phoneNumber,
      password,
      role = "dweller",
      addressLine1,
      houseNumber,
      city = "Colombo",
      aTaxNumber,
      postalCode,
      profilePicture 
    } = req.body ?? {};

    // basic validation (adjust to your needs)
    if (
      !fullName ||
      !email ||
      !phoneNumber ||
      !password ||
      !addressLine1 ||
      !houseNumber ||
      !aTaxNumber ||
      !postalCode
    ) {
      return res.status(400).json({ message: "Missing required fields" });
    }

    // uniqueness checks
    const existing = await User.findOne({ $or: [{ email }, { aTaxNumber }] });
    if (existing) {
      const field = existing.email === email ? "email" : "aTaxNumber";
      return res.status(400).json({ message: `${field} already exists` });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    // file (from multer)
    const file = req.file ?? req.files?.profilePicture?.[0];
    let profileUrl;
    if (file) {
      const uploadRes = await cloudinary.uploader.upload(toDataURI(file), {
        folder: "zero2hero/Users/profilePictures",
      });
      profileUrl = uploadRes.secure_url;
    }

    // Create user (dwellerId will be auto-generated by schema default)
    const user = await User.create({
      fullName,
      email,
      phoneNumber,
      password: hashedPassword,
      role,
      addressLine1,
      houseNumber,
      city,
      aTaxNumber,
      postalCode,
      ...(profileUrl && { profilePicture: profileUrl }),
        isActive: "inActive",
    });

    return res
      .status(201)
      .json({ message: "User created successfully", user });
  } catch (error) {
    // catch Multer errors too
    if (error?.message?.includes("Only image files are allowed")) {
      return res.status(400).json({ message: error.message });
    }
    console.error("Error creating user:", error);
    return res.status(500).json({ message: "Internal server error" });
  }
};


// Get All Users
export const getAllUsers = async (req, res) => {
    try {
        const users = await User.find();
        return res.status(200).json(users);
    } catch (error) {
        console.error("Error fetching users:", error);
        return res.status(500).json({ message: "Internal server error" });
    }
}

// Get User by ID
export const getUserById = async (req, res) => {
    const { id } = req.params;
    try {
        const user = await User.findById(id);
        if (!user) {
            return res.status(404).json({ message: "User not found" });
        }
        return res.status(200).json(user);
    } catch (error) {
        console.error("Error fetching user:", error);
        return res.status(500).json({ message: "Internal server error" });
    }
}

// Update User by ID
export const updateUserById = async (req, res) => {
    const { id } = req.params;
    const { fullName, email, phoneNumber,  role, addressLine1, houseNumber, city, aTaxNumber, postalCode } = req.body;
    try {
        const user = await User.findById(id); 
        if (!user) {
            return res.status(404).json({ message: "User not found" });
        }   
        const updatedUser = await User.findByIdAndUpdate(id, {
            fullName,
            email,
            phoneNumber,
            role,
            addressLine1,
            houseNumber,
            city,   
            aTaxNumber,
            postalCode
        }, { new: true });
        return res.status(200).json({ message: "User updated successfully", user: updatedUser });
    } catch (error) {
        console.error("Error updating user:", error);
        return res.status(500).json({ message: "Internal server error" });
    }
}

// Delete User by ID
export const deleteUserById = async (req, res) => {
    const { id } = req.params;
    try {
        const user = await User.findById(id);
        if (!user) {
            return res.status(404).json({ message: "User not found" });
        }
        await User.findByIdAndDelete(id);
        return res.status(200).json({ message: "User deleted successfully" });
    } catch (error) {
        console.error("Error deleting user:", error);
        return res.status(500).json({ message: "Internal server error" });
    }
}


